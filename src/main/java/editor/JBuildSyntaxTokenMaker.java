/* The following code was generated by JFlex 1.4.1 on 9/5/20, 6:06 PM */

/*
 * Generated on 9/5/20, 6:06 PM
 */
package editor;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 *
 */

public class JBuildSyntaxTokenMaker extends AbstractJFlexTokenMaker {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int EOL_COMMENT = 2;
    public static final int YYINITIAL = 0;
    public static final int MLC = 1;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\64\1\14"+
                    "\1\16\1\1\1\33\1\33\1\6\2\34\1\21\1\66\1\33\1\67"+
                    "\1\32\1\20\1\4\3\4\4\4\2\3\1\40\1\33\1\15\1\65"+
                    "\1\70\1\33\1\16\1\5\1\46\1\5\1\54\1\55\1\5\1\63"+
                    "\1\1\1\53\3\1\1\51\1\1\1\47\1\56\2\1\1\52\1\50"+
                    "\3\1\1\62\1\62\1\62\1\34\1\10\1\34\1\15\1\2\1\0"+
                    "\1\26\1\13\1\57\1\43\1\24\1\25\1\61\1\35\1\37\2\1"+
                    "\1\27\1\44\1\12\1\45\1\36\1\1\1\23\1\30\1\22\1\11"+
                    "\1\1\1\41\1\42\1\60\1\1\1\31\1\15\1\31\1\33\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\3\0\2\1\1\2\1\3\1\4\1\5\2\6\7\1"+
                    "\1\7\7\1\1\6\1\10\1\11\5\10\1\12\3\10"+
                    "\1\0\1\13\2\4\1\14\1\15\1\16\4\1\1\17"+
                    "\12\1\1\20\11\0\1\4\1\21\1\4\14\1\1\22"+
                    "\2\1\11\0\1\4\1\23\11\1\2\0\1\24\2\0"+
                    "\1\25\1\0\1\4\3\1\1\26\2\1\5\0\1\4"+
                    "\7\1\1\26";

    private static int [] zzUnpackAction() {
        int [] result = new int[136];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\253\0\u0156"+
                    "\0\u018f\0\u01c8\0\253\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
                    "\0\u031e\0\u0357\0\253\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
                    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\253\0\u0591\0\u05ca\0\u0603"+
                    "\0\u063c\0\u0675\0\253\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792"+
                    "\0\u07cb\0\u0804\0\253\0\253\0\253\0\u083d\0\u0876\0\u08af"+
                    "\0\u08e8\0\344\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
                    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\253\0\u0b5b\0\u0b94\0\u0bcd"+
                    "\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\253"+
                    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
                    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\344\0\u107a\0\u10b3"+
                    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b"+
                    "\0\u12b4\0\u12ed\0\344\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a"+
                    "\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2"+
                    "\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\344"+
                    "\0\u179a\0\u17d3\0\u180c\0\u1599\0\u1845\0\u1644\0\u187e\0\u18b7"+
                    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[136];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\3\5"+
                    "\1\10\2\4\1\11\1\12\1\13\1\14\1\15\1\16"+
                    "\1\17\1\20\1\21\1\22\1\23\2\4\1\23\1\5"+
                    "\1\24\1\25\1\26\4\5\1\21\1\27\1\5\1\30"+
                    "\1\5\1\31\4\5\1\32\4\5\1\26\2\13\1\33"+
                    "\1\4\7\34\1\35\11\34\1\36\3\34\1\37\7\34"+
                    "\1\40\3\34\1\41\27\34\7\42\1\43\15\42\1\44"+
                    "\7\42\1\45\3\42\1\46\27\42\72\0\5\5\2\0"+
                    "\1\47\3\5\6\0\7\5\4\0\3\5\1\0\23\5"+
                    "\5\0\3\50\2\6\1\50\2\0\4\50\2\0\1\50"+
                    "\3\0\7\50\4\0\3\50\1\0\23\50\5\0\7\10"+
                    "\1\51\1\52\3\10\1\53\54\10\17\0\1\11\71\0"+
                    "\1\54\1\55\50\0\5\5\2\0\1\47\3\5\6\0"+
                    "\1\5\1\56\5\5\4\0\3\5\1\0\23\5\6\0"+
                    "\5\5\2\0\1\47\3\5\6\0\7\5\4\0\3\5"+
                    "\1\0\4\5\1\57\16\5\6\0\5\5\2\0\1\47"+
                    "\3\5\6\0\7\5\4\0\3\5\1\0\1\5\1\60"+
                    "\21\5\6\0\5\5\2\0\1\47\3\5\6\0\4\5"+
                    "\1\61\2\5\4\0\3\5\1\0\23\5\6\0\5\5"+
                    "\2\0\1\47\3\5\6\0\6\5\1\62\4\0\3\5"+
                    "\1\0\23\5\6\0\5\5\2\0\1\47\3\5\6\0"+
                    "\6\5\1\63\4\0\3\5\1\0\23\5\6\0\5\5"+
                    "\2\0\1\47\3\5\6\0\7\5\4\0\1\5\1\64"+
                    "\1\5\1\0\16\5\1\65\4\5\6\0\5\5\2\0"+
                    "\1\47\3\5\6\0\5\5\1\66\1\5\4\0\3\5"+
                    "\1\0\4\5\1\67\16\5\6\0\5\5\2\0\1\47"+
                    "\3\5\6\0\3\5\1\62\3\5\4\0\3\5\1\0"+
                    "\3\5\1\70\17\5\72\0\1\13\4\0\5\5\2\0"+
                    "\1\47\3\5\6\0\7\5\4\0\3\5\1\0\6\5"+
                    "\1\71\14\5\6\0\5\5\2\0\1\47\3\5\6\0"+
                    "\7\5\4\0\3\5\1\0\6\5\1\72\14\5\6\0"+
                    "\5\5\2\0\1\47\3\5\6\0\7\5\4\0\3\5"+
                    "\1\0\12\5\1\73\10\5\6\0\5\5\2\0\1\47"+
                    "\3\5\6\0\7\5\4\0\3\5\1\0\4\5\1\74"+
                    "\16\5\75\0\1\13\7\34\1\0\11\34\1\0\3\34"+
                    "\1\0\7\34\1\0\3\34\1\0\27\34\20\0\1\75"+
                    "\72\0\1\76\14\0\1\77\53\0\1\100\107\0\1\101"+
                    "\27\0\7\42\1\0\15\42\1\0\7\42\1\0\3\42"+
                    "\1\0\27\42\22\0\1\102\14\0\1\103\53\0\1\104"+
                    "\107\0\1\105\40\0\1\106\57\0\6\50\2\0\4\50"+
                    "\2\0\1\50\3\0\7\50\4\0\3\50\1\0\23\50"+
                    "\5\0\10\51\1\107\3\51\1\110\60\51\1\10\1\51"+
                    "\1\10\1\0\1\10\1\111\3\10\5\51\2\10\1\51"+
                    "\1\10\43\51\1\0\5\5\2\0\1\47\1\112\2\5"+
                    "\6\0\4\5\1\113\2\5\4\0\3\5\1\0\23\5"+
                    "\6\0\5\5\2\0\1\47\3\5\6\0\1\114\6\5"+
                    "\4\0\3\5\1\0\23\5\6\0\5\5\2\0\1\47"+
                    "\3\5\6\0\1\115\6\5\4\0\3\5\1\0\23\5"+
                    "\6\0\5\5\2\0\1\47\3\5\6\0\5\5\1\116"+
                    "\1\5\4\0\3\5\1\0\23\5\6\0\5\5\2\0"+
                    "\1\47\3\5\6\0\7\5\4\0\1\117\2\5\1\0"+
                    "\23\5\6\0\5\5\2\0\1\47\3\5\6\0\5\5"+
                    "\1\120\1\5\4\0\3\5\1\0\23\5\6\0\5\5"+
                    "\2\0\1\47\3\5\6\0\4\5\1\121\2\5\4\0"+
                    "\3\5\1\0\23\5\6\0\5\5\2\0\1\47\3\5"+
                    "\6\0\7\5\4\0\3\5\1\0\4\5\1\122\16\5"+
                    "\6\0\5\5\2\0\1\47\3\5\6\0\5\5\1\123"+
                    "\1\5\4\0\3\5\1\0\23\5\6\0\5\5\2\0"+
                    "\1\47\3\5\6\0\7\5\4\0\1\5\1\124\1\5"+
                    "\1\0\23\5\6\0\5\5\2\0\1\47\3\5\6\0"+
                    "\7\5\4\0\3\5\1\0\7\5\1\125\13\5\6\0"+
                    "\5\5\2\0\1\47\3\5\6\0\7\5\4\0\3\5"+
                    "\1\0\15\5\1\126\5\5\6\0\5\5\2\0\1\47"+
                    "\3\5\6\0\7\5\4\0\3\5\1\0\13\5\1\127"+
                    "\7\5\6\0\5\5\2\0\1\47\3\5\6\0\5\5"+
                    "\1\130\1\5\4\0\3\5\1\0\23\5\43\0\1\131"+
                    "\61\0\1\132\63\0\1\133\107\0\1\134\65\0\1\135"+
                    "\61\0\1\136\63\0\1\137\107\0\1\140\32\0\3\141"+
                    "\5\0\1\141\10\0\3\141\14\0\1\141\2\0\1\141"+
                    "\5\0\2\141\1\0\1\141\11\0\7\51\1\0\64\51"+
                    "\3\142\2\51\1\107\2\51\1\142\1\110\7\51\3\142"+
                    "\14\51\1\142\2\51\1\142\5\51\2\142\1\51\1\142"+
                    "\11\51\1\0\5\5\2\0\1\47\3\5\6\0\2\5"+
                    "\1\143\4\5\4\0\3\5\1\0\23\5\6\0\5\5"+
                    "\2\0\1\47\1\5\1\144\1\5\6\0\7\5\4\0"+
                    "\3\5\1\0\23\5\6\0\5\5\2\0\1\47\3\5"+
                    "\6\0\4\5\1\145\2\5\4\0\3\5\1\0\23\5"+
                    "\6\0\5\5\2\0\1\47\3\5\6\0\1\5\1\146"+
                    "\5\5\4\0\3\5\1\0\23\5\6\0\5\5\2\0"+
                    "\1\47\3\5\6\0\6\5\1\112\4\0\3\5\1\0"+
                    "\23\5\6\0\5\5\2\0\1\47\3\5\6\0\4\5"+
                    "\1\147\2\5\4\0\3\5\1\0\23\5\6\0\5\5"+
                    "\2\0\1\47\3\5\6\0\7\5\4\0\2\5\1\122"+
                    "\1\0\23\5\6\0\5\5\2\0\1\47\3\5\6\0"+
                    "\5\5\1\150\1\5\4\0\3\5\1\0\23\5\6\0"+
                    "\5\5\2\0\1\47\3\5\6\0\1\62\6\5\4\0"+
                    "\3\5\1\0\23\5\6\0\5\5\2\0\1\47\3\5"+
                    "\6\0\7\5\4\0\3\5\1\0\17\5\1\151\3\5"+
                    "\6\0\5\5\2\0\1\47\3\5\6\0\7\5\4\0"+
                    "\3\5\1\0\4\5\1\152\16\5\6\0\5\5\2\0"+
                    "\1\47\3\5\6\0\7\5\4\0\3\5\1\0\7\5"+
                    "\1\153\13\5\6\0\5\5\2\0\1\47\3\5\6\0"+
                    "\7\5\4\0\3\5\1\0\14\5\1\126\6\5\6\0"+
                    "\5\5\2\0\1\47\3\5\6\0\7\5\4\0\3\5"+
                    "\1\0\4\5\1\154\16\5\45\0\1\155\54\0\1\131"+
                    "\102\0\1\156\64\0\1\157\76\0\1\160\54\0\1\135"+
                    "\102\0\1\161\64\0\1\162\41\0\3\163\5\0\1\163"+
                    "\10\0\3\163\14\0\1\163\2\0\1\163\5\0\2\163"+
                    "\1\0\1\163\11\0\3\51\3\164\2\51\1\107\2\51"+
                    "\1\164\1\110\7\51\3\164\14\51\1\164\2\51\1\164"+
                    "\5\51\2\164\1\51\1\164\11\51\1\0\5\5\2\0"+
                    "\1\47\3\5\6\0\6\5\1\165\4\0\3\5\1\0"+
                    "\23\5\6\0\5\5\2\0\1\47\3\5\6\0\1\166"+
                    "\6\5\4\0\3\5\1\0\23\5\6\0\5\5\2\0"+
                    "\1\47\1\167\2\5\6\0\7\5\4\0\3\5\1\0"+
                    "\23\5\6\0\5\5\2\0\1\47\3\5\6\0\7\5"+
                    "\4\0\1\5\1\150\1\5\1\0\23\5\6\0\5\5"+
                    "\2\0\1\47\3\5\6\0\2\5\1\170\4\5\4\0"+
                    "\3\5\1\0\23\5\6\0\5\5\2\0\1\47\3\5"+
                    "\6\0\7\5\4\0\3\5\1\0\20\5\1\171\2\5"+
                    "\6\0\5\5\2\0\1\47\3\5\6\0\1\5\1\122"+
                    "\5\5\4\0\3\5\1\0\23\5\6\0\5\5\2\0"+
                    "\1\47\3\5\6\0\7\5\4\0\3\5\1\0\6\5"+
                    "\1\172\14\5\6\0\5\5\2\0\1\47\3\5\6\0"+
                    "\1\5\1\170\5\5\4\0\3\5\1\0\23\5\25\0"+
                    "\1\173\100\0\1\131\7\0\1\155\31\0\1\157\1\174"+
                    "\3\157\1\174\2\0\3\157\2\0\1\174\1\0\1\157"+
                    "\1\174\7\157\1\0\3\174\3\157\1\174\23\157\4\174"+
                    "\21\0\1\175\100\0\1\135\7\0\1\160\31\0\1\162"+
                    "\1\176\3\162\1\176\2\0\3\162\2\0\1\176\1\0"+
                    "\1\162\1\176\7\162\1\0\3\176\3\162\1\176\23\162"+
                    "\4\176\4\0\3\177\5\0\1\177\10\0\3\177\14\0"+
                    "\1\177\2\0\1\177\5\0\2\177\1\0\1\177\11\0"+
                    "\3\51\3\200\2\51\1\107\2\51\1\200\1\110\7\51"+
                    "\3\200\14\51\1\200\2\51\1\200\5\51\2\200\1\51"+
                    "\1\200\11\51\1\0\5\5\2\0\1\47\3\5\6\0"+
                    "\5\5\1\201\1\5\4\0\3\5\1\0\23\5\6\0"+
                    "\5\5\2\0\1\47\3\5\6\0\2\5\1\202\4\5"+
                    "\4\0\3\5\1\0\23\5\6\0\5\5\2\0\1\47"+
                    "\3\5\6\0\7\5\4\0\3\5\1\0\2\5\1\203"+
                    "\20\5\6\0\5\5\2\0\1\47\3\5\6\0\7\5"+
                    "\4\0\3\5\1\0\4\5\1\204\16\5\6\0\5\5"+
                    "\2\0\1\47\3\5\6\0\7\5\4\0\3\5\1\0"+
                    "\10\5\1\126\12\5\25\0\1\157\70\0\1\162\53\0"+
                    "\3\5\5\0\1\5\10\0\3\5\14\0\1\5\2\0"+
                    "\1\5\5\0\2\5\1\0\1\5\11\0\3\51\3\10"+
                    "\2\51\1\107\2\51\1\10\1\110\7\51\3\10\14\51"+
                    "\1\10\2\51\1\10\5\51\2\10\1\51\1\10\11\51"+
                    "\1\0\5\5\2\0\1\47\3\5\6\0\4\5\1\205"+
                    "\2\5\4\0\3\5\1\0\23\5\6\0\5\5\2\0"+
                    "\1\47\3\5\6\0\7\5\4\0\3\5\1\0\15\5"+
                    "\1\206\3\5\1\170\1\5\6\0\5\5\2\0\1\47"+
                    "\3\5\6\0\2\5\1\62\4\5\4\0\3\5\1\0"+
                    "\23\5\6\0\5\5\2\0\1\47\1\5\1\170\1\5"+
                    "\6\0\7\5\4\0\3\5\1\0\23\5\6\0\5\5"+
                    "\2\0\1\47\3\5\6\0\1\207\6\5\4\0\3\5"+
                    "\1\0\23\5\6\0\5\5\2\0\1\47\3\5\6\0"+
                    "\7\5\4\0\3\5\1\0\21\5\1\170\1\5\6\0"+
                    "\5\5\2\0\1\47\3\5\6\0\2\5\1\210\4\5"+
                    "\4\0\3\5\1\0\23\5\6\0\5\5\2\0\1\47"+
                    "\3\5\6\0\7\5\4\0\3\5\1\0\22\5\1\170"+
                    "\5\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[6840];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\3\0\1\11\2\1\1\11\3\1\1\11\7\1\1\11"+
                    "\11\1\1\11\5\1\1\11\3\1\1\0\3\1\3\11"+
                    "\17\1\1\11\11\0\1\1\1\11\20\1\11\0\13\1"+
                    "\2\0\1\1\2\0\1\1\1\0\7\1\5\0\11\1";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[136];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the textposition at the last state to be included in yytext */
    private int zzPushbackPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /* user code: */


    /**
     * Constructor.  This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public JBuildSyntaxTokenMaker() {
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, true);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addHyperlinkToken(int, int, int)
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, false);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *        occurs.
     * @param hyperlink Whether this token is a hyperlink.
     */
    public void addToken(char[] array, int start, int end, int tokenType,
                         int startOffset, boolean hyperlink) {
        super.addToken(array, start,end, tokenType, startOffset, hyperlink);
        zzStartRead = zzMarkedPos;
    }


    /**
     * {@inheritDoc}
     */
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[] { "//", null };
    }


    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     *        <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     *         the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
            case Token.COMMENT_MULTILINE:
                state = MLC;
                start = text.offset;
                break;

            /* No documentation comments */
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos>=s.offset+s.count;
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }




    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public JBuildSyntaxTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    public JBuildSyntaxTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 180) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = zzLexicalState;


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 3:
                { addNullToken(); return firstToken;
                }
                case 23: break;
                case 14:
                { start = zzMarkedPos-2; yybegin(MLC);
                }
                case 24: break;
                case 5:
                { addToken(Token.WHITESPACE);
                }
                case 25: break;
                case 17:
                { addToken(Token.ERROR_STRING_DOUBLE);
                }
                case 26: break;
                case 15:
                { addToken(Token.RESERVED_WORD);
                }
                case 27: break;
                case 7:
                { addToken(Token.SEPARATOR);
                }
                case 28: break;
                case 1:
                { addToken(Token.IDENTIFIER);
                }
                case 29: break;
                case 10:
                { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
                }
                case 30: break;
                case 13:
                { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
                }
                case 31: break;
                case 22:
                { addToken(Token.FUNCTION);
                }
                case 32: break;
                case 4:
                { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
                }
                case 33: break;
                case 16:
                { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
                }
                case 34: break;
                case 19:
                { addToken(Token.LITERAL_BOOLEAN);
                }
                case 35: break;
                case 12:
                { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 36: break;
                case 21:
                { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
                }
                case 37: break;
                case 20:
                { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
                }
                case 38: break;
                case 18:
                { addToken(Token.RESERVED_WORD_2);
                }
                case 39: break;
                case 11:
                { addToken(Token.ERROR_NUMBER_FORMAT);
                }
                case 40: break;
                case 2:
                { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 41: break;
                case 6:
                { addToken(Token.OPERATOR);
                }
                case 42: break;
                case 8:
                {
                }
                case 43: break;
                case 9:
                { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
                }
                case 44: break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case EOL_COMMENT: {
                                addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
                            }
                            case 137: break;
                            case YYINITIAL: {
                                addNullToken(); return firstToken;
                            }
                            case 138: break;
                            case MLC: {
                                addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
                            }
                            case 139: break;
                            default:
                                return null;
                        }
                    }
                    else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}